{"version":3,"sources":["MyCheckbox.js","utility/arrays-helper.js","CheckboxOption.js","RadioOption.js","Category.js","App.js","reportWebVitals.js","index.js"],"names":["MyCheckbox","props","useState","isChecked","setIsChecked","FormControlLabel","value","index","control","Checkbox","color","onClick","isOn","arr","saved","JSON","parse","sessionStorage","getItem","category","title","filter","ele","push","setItem","stringify","label","labelPlacement","checked","CheckboxOption","windowWidth","useWindowWidth","console","log","checkboxes","array","i","options","length","element","create_checkboxes","get_selected","forEach","className","style","width","RadioOption","selectedState","RadioGroup","onChange","event","target","Radio","choices","Categories","reviewString","setReviewString","reviewInfo","setReviewInfo","clipboardFailed","setClipboardFailed","categoryComponents","type","create_categories","Button","variant","localReviewString","categoryJson","option","selectedOptions","includes","navigator","clipboard","writeText","then","err","error","window","open","document","write","String","raw","replaceAll","App","config_json","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b9992cf7.chunk.js","sourcesContent":["import './Option.css';\r\nimport React, { Component, useState } from 'react';\r\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport arrayRemove from './utility/arrays-helper'\r\n\r\nexport default function MyCheckbox(props) {\r\n    const [isChecked, setIsChecked] = useState(false)\r\n\r\n    const toggle = () => {\r\n        props.props.isOn = !isChecked;\r\n        var saved = JSON.parse(sessionStorage.getItem(props.props.category) || \"[]\")\r\n        \r\n        if (!isChecked) {\r\n            saved.push(props.props.title)\r\n            \r\n        } else {\r\n            saved = arrayRemove(saved, props.props.title)\r\n        }\r\n        sessionStorage.setItem(props.props.category, JSON.stringify(saved))\r\n\r\n        setIsChecked(!isChecked)\r\n    }\r\n\r\n    return (\r\n        <FormControlLabel\r\n            value={props.props.index}\r\n            control={<Checkbox color=\"primary\"\r\n                onClick={ toggle } />}\r\n            label={props.props.title}\r\n            labelPlacement=\"end\"\r\n            checked={isChecked}\r\n        />\r\n    );\r\n}","\r\nexport default function arrayRemove(arr, value) { \r\n    \r\n    return arr.filter(function(ele){ \r\n        return ele != value; \r\n    });\r\n}","import './Option.css';\r\nimport React from 'react';\r\nimport MyCheckbox from './MyCheckbox';\r\nimport { useWindowWidth } from '@react-hook/window-size'\r\n\r\nexport default function CheckboxOption(props) {\r\n    props = props.props\r\n    const windowWidth = useWindowWidth()\r\n\r\n    console.log(\"CheckboxOption function call i guess\")\r\n\r\n    const create_checkboxes = () => {\r\n        var array = []\r\n        for (let i = 0; i < props.options.length; i++) {\r\n            const element = props.options[i];\r\n            array.push(<MyCheckbox props={{title: element, index: i, category: props.title}} />)\r\n        }\r\n        return array\r\n    }\r\n    const checkboxes = create_checkboxes()\r\n\r\n    props.get_selected = () => {\r\n        var checked = []\r\n        checkboxes.forEach(element => {\r\n            if (element.props.props.isOn) {\r\n                checked.push(element.props.props.title)\r\n            }\r\n        });\r\n        return checked\r\n    }\r\n    \r\n    return (\r\n        <div className=\"radio-container\" style={{width: (windowWidth < 1000 ? '90%' : '40%')}}>\r\n            <h3 className=\"snug\">{props.title}</h3>\r\n            {checkboxes}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import './Option.css';\r\nimport React from 'react';\r\nimport { FormControlLabel, Radio, RadioGroup} from '@material-ui/core';\r\nimport { useWindowWidth } from '@react-hook/window-size'\r\n\r\n\r\nexport default function RadioOption(props) {\r\n    const windowWidth = useWindowWidth()\r\n\r\n    props = props.props \r\n    props.selectedState = \"\"\r\n\r\n    const radioClicked = (event) => {\r\n        props.selectedState = event.target.value\r\n        sessionStorage.setItem(props.title, event.target.value)\r\n    };\r\n\r\n    const choices = () => {\r\n        var array = []\r\n        for (let i = 0; i < props.options.length; i++) {\r\n            const element = props.options[i];\r\n            array.push(<FormControlLabel value={element} control={<Radio color=\"primary\" />} label={element} />)\r\n        }\r\n        return array\r\n    }\r\n\r\n    return (\r\n        <div className=\"radio-container\" style={{width: (windowWidth < 1000 ? '90%' : '40%')}}>\r\n            <h3 className=\"snug\">{props.title}</h3>\r\n            <RadioGroup onChange={radioClicked}>\r\n                {choices()}\r\n            </RadioGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import './Category.css';\r\nimport React, { useState } from 'react';\r\nimport CheckboxOption from './CheckboxOption';\r\nimport RadioOption from './RadioOption';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport default function Categories(props) {\r\n\r\n    const [reviewString, setReviewString] = useState(\"\")\r\n    const [reviewInfo, setReviewInfo] = useState(\"\")\r\n    const [clipboardFailed, setClipboardFailed] = useState(false) \r\n    \r\n    const create_categories = () => {\r\n        var array = []\r\n        for (let i = 0; i < props.props.length; i++) {\r\n            const element = props.props[i];\r\n            if (element.type === \"radio\") {\r\n                array.push(<RadioOption props={element} />)\r\n            } else if (element.type === \"check\") {\r\n                array.push(<CheckboxOption props={element} />)\r\n            }\r\n        }\r\n        return array\r\n    }\r\n    const categoryComponents = create_categories()\r\n\r\n    const generate_review = () => {\r\n        var localReviewString = \"\"\r\n\r\n        for (let i = 0; i < props.props.length; i++) {\r\n            const categoryJson = props.props[i];\r\n            const component = categoryComponents[i];\r\n\r\n\r\n            localReviewString = localReviewString + \"---{ \" + categoryJson.title + \" }---\\n\"\r\n\r\n\r\n            // With radio, only one option is selected\r\n            if (categoryJson.type === \"radio\") {\r\n                var saved = sessionStorage.getItem(categoryJson.title) || \"\"\r\n                categoryJson.options.forEach(option => {\r\n                    localReviewString += ((saved === option ? \"☑ \" : \"☐ \") + option)\r\n                    localReviewString += \"\\n\"\r\n                });\r\n            } else if (categoryJson.type === \"check\") {\r\n                const selectedOptions = JSON.parse(sessionStorage.getItem(categoryJson.title) || \"[]\")\r\n                categoryJson.options.forEach(option => {\r\n                    // This check could have lesser complexity...\r\n                    localReviewString += ((selectedOptions.includes(option) ? \"☑ \" : \"☐ \") + option)\r\n                    localReviewString += \"\\n\"\r\n                });\r\n            } else {\r\n                localReviewString += \"ERROR - bad category type. (radio | check)\\n\"\r\n            }\r\n            localReviewString += \"\\n\"\r\n        }\r\n        // Credit for Steam's formatting system\r\n        localReviewString += \"[hr][/hr]\\n\"\r\n        localReviewString += \"Grab this review template [url=https://vojtastruhar.github.io/steam-review-template/] here [/url].\\n\"\r\n\r\n        console.log(localReviewString)\r\n        setReviewString(localReviewString)\r\n\r\n        navigator.clipboard.writeText(localReviewString).then(function () {\r\n            console.log('Async: Copying to clipboard was successful!');\r\n            setReviewInfo(\"The review has been copied into your clipboard!\")\r\n            setClipboardFailed(false)\r\n        }, function (err) {\r\n            console.error('Async: Could not copy text: ', err);\r\n            setReviewInfo(\"Copying into clipboard failed.\")\r\n            setClipboardFailed(true)\r\n        });\r\n    }\r\n\r\n    const check_review_in_new_window = () => {\r\n        var newWin = window.open('url','Steam review','height=700,width=500,scrollbars=yes,resizable=yes');\r\n        newWin.document.write(String.raw`${reviewString.replaceAll(\"\\n\", \"<br/>\")}`);\r\n        console.log(reviewString)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"centered\">\r\n                <div>\r\n                    {categoryComponents}\r\n                </div>\r\n            </div>\r\n            <div className=\"button-centered\">\r\n                <Button variant=\"contained\" color=\"primary\" onClick={generate_review}>\r\n                    Generate Steam Review\r\n                </Button>\r\n                {reviewInfo !== \"\" &&\r\n                    <p className=\"review\" >{reviewInfo}</p>\r\n                }\r\n                {clipboardFailed &&\r\n                    <Button onClick={check_review_in_new_window}>View text in separate window</Button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import './App.css';\r\nimport Categories from './Category';\r\nimport config_json from './review_templates/config_rdr2.json'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h2 className=\"App-header\">{\"---{ Review Template }---\"}</h2>\r\n        <p className=\"App-header\">☑ Awesome</p>\r\n      </header>\r\n      \r\n      <div className=\"categories-container\">\r\n        <Categories props={config_json.categories}/>\r\n      </div>\r\n\r\n      \r\n      <footer className=\"App-footer\">\r\n        <p className=\"signature\">Vojtěch Struhár, 2021</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}